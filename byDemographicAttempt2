import csv
import sqlite3
from datetime import datetime
from dateutil.relativedelta import relativedelta
import os

def get_person_info(conn, person_id):
    """
    Fetch GENDER_CONCEPT_ID, RACE_CONCEPT_ID, ETHNICITY_CONCEPT_ID,
    YEAR_OF_BIRTH, MONTH_OF_BIRTH from the PERSON table for a given person_id.
    Returns a dict with the columns or None if not found.
    """
    query = """
    SELECT
        GENDER_CONCEPT_ID,
        RACE_CONCEPT_ID,
        ETHNICITY_CONCEPT_ID,
        YEAR_OF_BIRTH,
        MONTH_OF_BIRTH
    FROM PERSON
    WHERE PERSON_ID = ?
    """

    cursor = conn.execute(query, (person_id,))
    row = cursor.fetchone()
    if row is None:
        return None

    return {
        'GENDER_CONCEPT_ID': row[0],
        'RACE_CONCEPT_ID': row[1],
        'ETHNICITY_CONCEPT_ID': row[2],
        'YEAR_OF_BIRTH': row[3],
        'MONTH_OF_BIRTH': row[4]
    }

def calculate_age(visit_date_str, year_of_birth, month_of_birth):
    """
    Compute age (in full years) at visit_date_str, given year and month of birth.
    We assume day of birth is the 1st if only year/month is known.
    """
    if not visit_date_str or not year_of_birth or not month_of_birth:
        return None

    try:
        visit_date = datetime.strptime(visit_date_str, "%Y-%m-%d")
    except ValueError:

        return None

    try:
        birth_date = datetime(int(year_of_birth), int(month_of_birth), 1)
    except ValueError:
        return None

    age_delta = relativedelta(visit_date, birth_date)
    return age_delta.years

def main():

    input_csv_path = r"F:\Raine\all_visits.csv"
    output_csv_path = r"F:\Raine\all_visits_updated.csv"  
    sqlite_path = r"F:\AllMontefiore2024August.sqlite"

    conn = sqlite3.connect(sqlite_path)

    with open(input_csv_path, 'r', newline='', encoding='utf-8') as infile, \
         open(output_csv_path, 'w', newline='', encoding='utf-8') as outfile:

        reader = csv.DictReader(infile)

        fieldnames = reader.fieldnames + [
            'GENDER_CONCEPT_ID',
            'RACE_CONCEPT_ID',
            'ETHNICITY_CONCEPT_ID',
            'AGE'
        ]
        writer = csv.DictWriter(outfile, fieldnames=fieldnames)
        writer.writeheader()

        for row in reader:
            person_id_str = row.get("PERSON_ID", "")
            visit_date_str = row.get("VISIT_START_DATE", "")

            try:
                person_id = int(person_id_str)
            except ValueError:
                person_id = None

            if person_id is not None:

                pinfo = get_person_info(conn, person_id)
                if pinfo is not None:

                    row["GENDER_CONCEPT_ID"] = pinfo['GENDER_CONCEPT_ID']
                    row["RACE_CONCEPT_ID"] = pinfo['RACE_CONCEPT_ID']
                    row["ETHNICITY_CONCEPT_ID"] = pinfo['ETHNICITY_CONCEPT_ID']

                    year_of_birth = pinfo['YEAR_OF_BIRTH']
                    month_of_birth = pinfo['MONTH_OF_BIRTH']
                    age = calculate_age(visit_date_str, year_of_birth, month_of_birth)
                    row["AGE"] = age
                else:

                    row["GENDER_CONCEPT_ID"] = None
                    row["RACE_CONCEPT_ID"] = None
                    row["ETHNICITY_CONCEPT_ID"] = None
                    row["AGE"] = None
            else:

                row["GENDER_CONCEPT_ID"] = None
                row["RACE_CONCEPT_ID"] = None
                row["ETHNICITY_CONCEPT_ID"] = None
                row["AGE"] = None

            writer.writerow(row)

    conn.close()

if __name__ == "__main__":
    main()
